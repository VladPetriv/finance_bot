name: Deploy

on:
  pull_request:
    branches: ["main"]
  push:
    branches:
      - production

permissions:
  checks: read
  contents: read
  pull-requests: read

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.23"

      - name: Install dependencies
        run: go mod download

      - name: Build
        run: make build

      - name: Setup mongodb
        uses: supercharge/mongodb-github-action@1.9.0

      - name: Test
        run: make test

  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: "1.23"
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  deploy:
    needs: [build_and_test, golangci]
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.REPO_NAME }}:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.REPO_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.REPO_NAME }}:buildcache,mode=max

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.REPO_NAME }}:latest

            # Stop and remove the old container if it exists
            docker stop finance_bot || true
            docker rm finance_bot || true

            echo "${{ secrets.PROD_ENV }}" > config.env
            chmod +x config.env

            docker run -d \
              --name finance_bot \
              --restart unless-stopped \
              -p 8443:8443 \
              --env-file config.env \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.REPO_NAME }}:latest

            docker image prune -f
