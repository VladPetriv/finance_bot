// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/VladPetriv/finance_bot/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// BalanceStore is an autogenerated mock type for the BalanceStore type
type BalanceStore struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, balance
func (_m *BalanceStore) Create(ctx context.Context, balance *models.Balance) error {
	ret := _m.Called(ctx, balance)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Balance) error); ok {
		r0 = rf(ctx, balance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, balanceID
func (_m *BalanceStore) Delete(ctx context.Context, balanceID string) error {
	ret := _m.Called(ctx, balanceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, balanceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, userID
func (_m *BalanceStore) Get(ctx context.Context, userID string) (*models.Balance, error) {
	ret := _m.Called(ctx, userID)

	var r0 *models.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Balance, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Balance); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, balance
func (_m *BalanceStore) Update(ctx context.Context, balance *models.Balance) error {
	ret := _m.Called(ctx, balance)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Balance) error); ok {
		r0 = rf(ctx, balance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBalanceStore creates a new instance of BalanceStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBalanceStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *BalanceStore {
	mock := &BalanceStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
