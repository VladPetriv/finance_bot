// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/VladPetriv/finance_bot/internal/models"
	mock "github.com/stretchr/testify/mock"

	service "github.com/VladPetriv/finance_bot/internal/service"
)

// OperationStore is an autogenerated mock type for the OperationStore type
type OperationStore struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, operation
func (_m *OperationStore) Create(ctx context.Context, operation *models.Operation) error {
	ret := _m.Called(ctx, operation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Operation) error); ok {
		r0 = rf(ctx, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, operationID
func (_m *OperationStore) Delete(ctx context.Context, operationID string) error {
	ret := _m.Called(ctx, operationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, operationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, balanceID, filters
func (_m *OperationStore) GetAll(ctx context.Context, balanceID string, filters service.GetAllOperationsFilter) ([]models.Operation, error) {
	ret := _m.Called(ctx, balanceID, filters)

	var r0 []models.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, service.GetAllOperationsFilter) ([]models.Operation, error)); ok {
		return rf(ctx, balanceID, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, service.GetAllOperationsFilter) []models.Operation); ok {
		r0 = rf(ctx, balanceID, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, service.GetAllOperationsFilter) error); ok {
		r1 = rf(ctx, balanceID, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, operationID, operation
func (_m *OperationStore) Update(ctx context.Context, operationID string, operation *models.Operation) error {
	ret := _m.Called(ctx, operationID, operation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Operation) error); ok {
		r0 = rf(ctx, operationID, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOperationStore creates a new instance of OperationStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOperationStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *OperationStore {
	mock := &OperationStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
